1.Spring Aop

1）、加入jar包：

com.springsource.org.aopalliance-1.0.0.jar
com.springsource.org.aspectj.weaver-1.6.8.RELEASE.jar
spring-aspects-4.0.0.RELEASE.jar
commons-logging-1.1.3.jar

spring-aop-4.0.0.RELEASE.jar
spring-beans-4.0.0.RELEASE.jar
spring-context-4.0.0.RELEASE.jar
spring-core-4.0.0.RELEASE.jar
spring-expression-4.0.0.RELEASE.jar

2）、在配置文件中加入 aop的命名空间 
xmlns:aop="http://www.springframework.org/schema/aop" 

3）、基于注解的方式

①.在配置文件中加入如下配置
    	<aop:aspectj-autoproxy></aop:aspectj-autoproxy>

②.把横切关注点的代码抽象到切面的类中。
    Ⅰ.切面首先是IOC中的bean ，即加入@Component 注解
    Ⅱ. 切面还需要加入@Aspect 注解
    
③.在类中声明各种通知
	Ⅰ.声明一个方法
	Ⅱ. 在方法前面加入 @Before 注解
	
④.可以在通知方法中声明一个类型为JoinPoint 的参数，然后就能访问链接细节，如方法名称和参数值。

@Aspect
@Component
public class LoggingAspect {

			//声明改方法是一个前置通知：在目标方法开始之前执行
			@Before("execution(public int com.hr.spring.aop.impl.ArithmeticCalculatorImpl.*(int , int ))")
			public void  beforeMethod(JoinPoint joinPoint) {
				String methodName = joinPoint.getSignature().getName();
				List<Object> args = Arrays.asList(joinPoint.getArgs());
				System.out.println("The method " + methodName + " begins with " + args );
			}
		
}


